// Assignment 2 19T3 COMP1511: Pokedex
// test_pokedex.c
//
// This file allows you to automatically test the functions you
// implement in pokedex.c.
//
// This program was written by Xingyu(Steve) TAN (z5237560)
// on 22/11/2019
//
// Version 1.0.0: Assignment released.

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include "pokedex.h"


//my define 
//set a new pokemon named sample, with id 3.
#define SAMPLE_ID 3
#define SAMPLE_NAME "SAMPLE"
#define SAMPLE_HEIGHT 1.0
#define SAMPLE_WEIGHT 13.0
#define SAMPLE_FIRST_TYPE WATER_TYPE
#define SAMPLE_SECOND_TYPE FLYING_TYPE


// Sample data on Bulbasaur, the Pokemon with pokemon_id 1.
#define BULBASAUR_ID 1
#define BULBASAUR_NAME "Bulbasaur"
#define BULBASAUR_HEIGHT 0.7
#define BULBASAUR_WEIGHT 6.9
#define BULBASAUR_FIRST_TYPE GRASS_TYPE
#define BULBASAUR_SECOND_TYPE POISON_TYPE

// Sample data on Ivysaur, the Pokemon with pokemon_id 2.
#define IVYSAUR_ID 2
#define IVYSAUR_NAME "Ivysaur"
#define IVYSAUR_HEIGHT 1.0
#define IVYSAUR_WEIGHT 13.0
#define IVYSAUR_FIRST_TYPE GRASS_TYPE
#define IVYSAUR_SECOND_TYPE POISON_TYPE




//MY FUCTION
static void test_a_NULL_pokedex(void); 
static void test_get_pokemon_of_type (void);
static void test_search_pokemon (void);
static void test_if_the_evo_can_cover_old (void);
static void test_if_remove_can_repeating_untill_NULL (void);
static void test_if_new_pokedex_edit_alter_ori_pokedex (void);
static void test_if_evo_info_be_copied (void);
static void test_detail_pokemon(void);
static void test_find_current_pokemon(void); 
static void test_pre_pokemon_and_change_current_pokemon (void);
static void test_show_type(void);
static void test_go_exploring_and_print_pokemon(void);

//MY Helper fuction
static Pokemon create_sample(void);

// Tests for Pokedex functions from pokedex.c.
static void test_new_pokedex(void);
static void test_add_pokemon(void);
static void test_get_found_pokemon(void);
static void test_next_pokemon(void);


// Helper functions for creating/comparing Pokemon.
static Pokemon create_bulbasaur(void);
static Pokemon create_ivysaur(void);
static int is_same_pokemon(Pokemon first, Pokemon second);
static int is_copied_pokemon(Pokemon first, Pokemon second);

////////////////////////////////


int main(int argc, char *argv[]) {
    printf("Welcome to the COMP1511 Pokedex Tests!\n");

    printf("\n==================== Pokedex Tests ====================\n");

    test_new_pokedex();
    test_add_pokemon();
    test_detail_pokemon(); 
    test_find_current_pokemon();
    test_next_pokemon();
    test_pre_pokemon_and_change_current_pokemon();
    test_get_found_pokemon();
    test_a_NULL_pokedex(); 
    test_show_type();
    test_go_exploring_and_print_pokemon();
    test_get_pokemon_of_type();
    test_search_pokemon ();
    test_if_the_evo_can_cover_old ();
    test_if_remove_can_repeating_untill_NULL ();
    test_if_new_pokedex_edit_alter_ori_pokedex ();
    test_if_evo_info_be_copied ();
    printf("\nAll Pokedex tests passed, you are Awesome!\n");
}


////////////////////////////////////////////////////////////////////////
//                     Pokedex Test Functions                         //
////////////////////////////////////////////////////////////////////////

// `test_new_pokedex` checks whether the new_pokedex and destroy_pokedex
// functions work correctly, to the extent that it can.
//
// It does this by creating a new Pokedex, checking that it's not NULL,
// then calling destroy_pokedex.
//
// Note that it isn't possible to check whether destroy_pokedex has
// successfully destroyed/freed the Pokedex, so the best we can do is to
// call the function and make sure that it doesn't crash..
static void test_new_pokedex(void) {
    printf("\n>> Testing new_pokedex\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("       --> Checking that the returned Pokedex is not NULL\n");
    assert(pokedex != NULL);

    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed new_pokedex tests!\n");
}

// `test_add_pokemon` checks whether the add_pokemon function works
// correctly.
//
// It does this by creating the Pokemon Bulbasaur and ivysaur
// (using the helper
// functions in this file and the provided code in pokemon.c), and
// calling add_pokemon to add it to the Pokedex.
  
//  then, checking whether the currently selected Pokemon is correctly set,
//  checking that functions such as `count_total_pokemon` return the
//  correct result after more Pokemon are added,
static void test_add_pokemon(void) {
    printf("\n>> Testing add_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur\n");
    Pokemon bulbasaur = create_bulbasaur();
    
    printf("    ... Creating Ivysaur\n");
    Pokemon ivysaur = create_ivysaur();

    printf("    ... Adding Bulbasaur to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    
    printf("    ... Adding ivysaur to the Pokedex\n");
    add_pokemon(pokedex, ivysaur);
    
    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), bulbasaur));

    printf("       --> Checking that the sum of pokemons is correct\n");    
    assert(count_total_pokemon(pokedex) == 2);
    
    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed add_pokemon tests!\n");
}

// `test_detail_pokemon` checks whether the detail_pokemon function works
// correctly.
//
// It does this by creating the Pokemon Bulbasaur and ivysaur
// (using the helper
// functions in this file and the provided code in pokemon.c), and
// calling add_pokemon to add it to the Pokedex.
 
//  checking whether the currently selected Pokemon is correctly set,
//  checking that functions such as `count_total_pokemon` return the
//  correct result after more Pokemon are added,

// then check if the detail_pokemon fuction running correctly.
// by showing hided bulbasaur information.
static void test_detail_pokemon(void) {
    printf("\n>> Testing detail_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur\n");
    Pokemon bulbasaur = create_bulbasaur();
    
    printf("    ... Creating Ivysaur\n");
    Pokemon ivysaur = create_ivysaur();

    printf("    ... Adding Bulbasaur to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    
    printf("    ... Adding ivysaur to the Pokedex\n");
    add_pokemon(pokedex, ivysaur);
    
    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), bulbasaur));

    printf("       --> Checking that the sum of pokemons is correct\n");    
    assert(count_total_pokemon(pokedex) == 2);
    
    printf("    ... Showing the detail of current Pokedex\n");
    detail_pokemon(pokedex);
    
    printf("       --> Checking that the details of pokemon correctly personally.\n");
    
    printf("ID: 001\n");
    printf("Name: *********\n");
    printf("Height: --\n");
    printf("Weight: --\n");
    printf("Type: --\n");
    
    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed dtail_pokemon tests!\n");
}

// `test_find_current_pokemon` checks whether 
// the find_current_pokemon function works correctly.
//
// It does this by creating the Pokemon Bulbasaur and ivysaur
// (using the helper
// functions in this file and the provided code in pokemon.c), and
// calling add_pokemon to add it to the Pokedex.
 
//  checking whether the currently selected Pokemon is correctly set,
//  checking that functions such as `count_total_pokemon` return the
//  correct result after more Pokemon are added,

// then showing hided bulbasaur information by running [detail_pokemon].
// then using find_current_pokemon.
// then compare if the [find_current_pokemon] running correctly
// by compare the pokemon information before and after being found.
static void test_find_current_pokemon(void) {
    printf("\n>> Testing find_current_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur\n");
    Pokemon bulbasaur = create_bulbasaur();
    
    printf("    ... Creating Ivysaur\n");
    Pokemon ivysaur = create_ivysaur();

    printf("    ... Adding Bulbasaur to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    
    printf("    ... Adding ivysaur to the Pokedex\n");
    add_pokemon(pokedex, ivysaur);
    
    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), bulbasaur));

    printf("       --> Checking that the sum of pokemons is correct\n");    
    assert(count_total_pokemon(pokedex) == 2);
    
    printf("    ... Showing the detail of current Pokedex\n");
    detail_pokemon(pokedex);
    
    printf("       --> Checking that the details of pokemon correctly personally.\n");
    
    printf("ID: 001\n");
    printf("Name: *********\n");
    printf("Height: --\n");
    printf("Weight: --\n");
    printf("Type: --\n");
    
    printf("    ... finding current Pokedex\n");
    find_current_pokemon(pokedex);
    
    printf("    ... Showing the detail of current Pokedex\n");
    detail_pokemon(pokedex);
    
    printf("       --> Checking that the details of pokemon ");
    printf("after being found correctly personally.\n");
    
    printf("ID: 001\n");
    printf("Name: Bulbasaur\n");
    printf("Height: 0.7m\n");
    printf("Weight: 6.9kg\n");
    printf("Type: Grass Poison\n");
    
    
    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed find_current_pokemon tests!\n");
}


// `test_next_pokemon` checks whether the next_pokemon function works
// correctly.
//
// It does this by creating two Pokemon: Bulbasaur ,Ivysaur  and sample 
// (using the helper functions in this file and the provided code in
// pokemon.c).
//
// It then adds these to the Pokedex, then checks that calling the
// next_pokemon function changes the currently selected Pokemon from
// Bulbasaur to Ivysaur.
// then check if the next_pokemon works correctly.
// calling the next_pokemon function when there is no "next" Pokemon,
// calling the next_pokemon function when there are no Pokemon in
// the Pokedex,

static void test_next_pokemon(void) {
    printf("\n>> Testing next_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur ,Ivysaur and sample\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    

    printf("    ... Adding Bulbasaur, Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), bulbasaur));

    printf("    ... Moving to the next pokemon\n");
    next_pokemon(pokedex);

    printf("       --> Checking that the current Pokemon is Ivysaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), ivysaur));
    
    printf("    ... Moving to the next pokemon\n");
    next_pokemon(pokedex);

    printf("       --> Checking that the current Pokemon is sample\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), sample));
    
    printf("    ... Moving to the next pokemon\n");
    next_pokemon(pokedex);

    printf("       --> Checking that the current Pokemon has no change\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), sample));

    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed next_pokemon tests!\n");
}

// `test_next_pokemon` checks whether the next_pokemon function works
// correctly.
//
// It does this by creating two Pokemon: Bulbasaur ,Ivysaur  and sample 
// (using the helper functions in this file and the provided code in
// pokemon.c).
//
// It then adds these to the Pokedex, 
// then checks that the current pokemon is bulbasaur.

// then call out [change_current_pokemon] to ID3
// check if the current selcet pokemon have changed to sample

// then call out [prev_pokemon];
// check if the current selcet pokemon have changed to ivysaur.
static void test_pre_pokemon_and_change_current_pokemon(void) {
    printf("\n>> Testing prev_pokemon and change_current_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur ,Ivysaur and sample\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    

    printf("    ... Adding Bulbasaur, Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), bulbasaur));

    printf("    ... changing_current_pokemon to the id of 3 \n");
    change_current_pokemon(pokedex, 3);
    
    printf("       --> Checking that the current Pokemon is sample\n");
    assert(get_current_pokemon(pokedex) == sample);
    
    printf("    ... Moving to the previous pokemon\n");
    prev_pokemon(pokedex);

    printf("       --> Checking that the current Pokemon is ivysaur\n");
    assert(is_same_pokemon(get_current_pokemon(pokedex), ivysaur));

    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed prev_pokemon and change_current_pokemon tests!\n");
}

// `test_get_found_pokemon` checks whether the get_found_pokemon
// function works correctly.
//
// It does this by creating two Pokemon: Bulbasaur and Ivysaur (using
// the helper functions in this file and the provided code in pokemon.c).
//
// It then adds these to the Pokedex, sets Bulbasaur to be found, and
// then calls the get_found_pokemon function to get all of the Pokemon
// which have been found (which should be just the one, Bulbasaur).
//
// Some of the ways that you could extend these tests would include:
//   - calling the get_found_pokemon function on an empty Pokedex,
//   - calling the get_found_pokemon function on a Pokedex where none of
//     the Pokemon have been found,
//   - checking that the Pokemon in the new Pokedex are in ascending
//     order of pokemon_id (regardless of the order that they appeared
//     in the original Pokedex),
//   - checking that the currently selected Pokemon in the returned
//     Pokedex has been set correctly,
//   - checking that the original Pokedex has not been modified,

static void test_get_found_pokemon(void) {
    printf("\n>> Testing get_found_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();
    
    printf("    ... Creating Bulbasaur and Ivysaur\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();

    printf("    ... Adding Ivysaur firstly to the Pokedex\n");
    
    add_pokemon(pokedex, ivysaur);
    
    printf("    ... Adding bulbasaur secondly to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == ivysaur);
    
    printf("       --> Checking the pokedex is created correct\n");
    assert(count_total_pokemon(pokedex) == 2);
    
    printf("    ... Getting all found Pokemon for none pokemon be found\n");
    Pokedex found_none_pokedex = get_found_pokemon(pokedex);
    
    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(found_none_pokedex) == 0);
    assert(count_found_pokemon(found_none_pokedex) == 0);
   
    
    printf("    ... Setting Bulbasaur to be found\n");
    find_current_pokemon(pokedex);
    
    printf("    ... Setting next pokemon be current select\n");
    next_pokemon(pokedex);
    
    printf("    ... Setting ivysaur to be found\n");
    find_current_pokemon(pokedex);

    printf("    ... Getting all found Pokemon\n");
    Pokedex found_pokedex = get_found_pokemon(pokedex);

    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(found_pokedex) == 2);
    assert(count_found_pokemon(found_pokedex) == 2);
    
    
    printf("       --> Checking Pokedex are in ascending");
    assert(is_copied_pokemon(get_current_pokemon(found_pokedex), bulbasaur));
    

    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
    destroy_pokedex(found_pokedex);

    printf(">> Passed get_found_pokemon tests!\n");
}




// this is the fuction to test if these fuctions is able to run 
// if there is no pokemon in pokedex 
static void test_a_NULL_pokedex(void) {
    printf("\n>> Testing for there is no pokemon in the list \n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    
    printf("    ... get the detail_pokemon is able to use \n");
    detail_pokemon(pokedex);

    printf("    ... geting the current pokemon\n");
    get_current_pokemon(pokedex);
    
    printf("    ... printing the name of pokemon\n");
    print_pokemon(pokedex);
    
    printf("    ... transfering the current select to next\n");
    next_pokemon(pokedex);
    
    printf("    ... transfering the current select to previous\n");
    prev_pokemon(pokedex);
    
    printf("    ... changing the current selcting to no existing pokemon\n");
    change_current_pokemon(pokedex, 111);

    printf("    ... removing the current selcting pokemon\n");
    remove_pokemon(pokedex);
    
    printf("    ... showing the type of the no existing list\n");
    show_types(pokedex);
    
    printf("    ... go_exploring the non-existing pokedex\n");
    go_exploring(pokedex);
    
    printf("    ... comparing the count_found_pokemon is zero\n");
    assert(count_found_pokemon(pokedex) == 0);
    
    printf("    ... comparing the count_total_pokemon is zero\n");
    assert(count_total_pokemon(pokedex) == 0);
    
    printf("    ... showing the whole evolution\n");
    show_evolutions(pokedex);
    
    printf("    ... geting the next evolution of non-existing pokedex\n");
    assert(get_next_evolution(pokedex) == DOES_NOT_EVOLVE);
   
    printf("    ... geting a new pokedex of the found pokemon and destroy it.\n");
    Pokedex newpokedex = new_pokedex();
    newpokedex = get_found_pokemon(pokedex);
    destroy_pokedex(newpokedex);
    
    printf("    ... geting a new pokedex which has a similary name given.\n");
    Pokedex searchpokedex = new_pokedex();
    searchpokedex = search_pokemon(pokedex, "ooo");
    
    printf("    ... destroy the newpokedex\n");
    destroy_pokedex(searchpokedex);
    
    printf("    ... destroy the pokedex\n");
    destroy_pokedex(pokedex);
    
    printf(">> Passed empty tests!\n");

}

// `test_show_type` checks whether the shoe_types works
// correctly.
//
// It does this by creating two Pokemon: Bulbasaur ,Ivysaur  and sample 
// (using the helper functions in this file and the provided code in
// pokemon.c).
//
// It then adds these to the Pokedex, 
// then checks that the current pokemon is bulbasaur.

// then call out [shoe_types] 
// then check if the types print out correctly.
static void test_show_type(void) {
    printf("\n>> Testing show_types\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur ,Ivysaur and sample\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);
    
    printf("    ... showing the type\n");
    show_types(pokedex);
    
    printf("       --> comparing types personally\n");
    printf("Grass\n");
    printf("Poison\n");
    printf("Water\n");
    printf("Flying\n");

    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed shoe_types tests!\n");
}

// `test_go_exploring_and_print_pokemon` checks 
// whether the shoe_types and go_exploring works
// correctly.
//
// It does this by creating two Pokemon: Bulbasaur ,Ivysaur  and sample 
// (using the helper functions in this file and the provided code in
// pokemon.c).
//
// It then adds these to the Pokedex, 
// and call out [print_pokemon]
// comparing if print out correctly

// then, using [go_exploring]

// and call out [print_pokemon]
// comparing if print out correctly after going_exploring.
static void test_go_exploring_and_print_pokemon(void) {
    printf("\n>> Testing go_exploring\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur ,Ivysaur and sample\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);
    
    printf("    ... print all the pokemons\n");
    print_pokemon(pokedex);
    
    printf("       --> comparing pokemons personally\n");
    
    printf("--> #001: *********\n");
    printf("    #002: *******\n");
    printf("    #003: ******\n");

    
    printf("    ... going_exploring the pokedex\n");
    go_exploring(pokedex);
    
    printf("    ... print all the pokemons\n");
    print_pokemon(pokedex);
    
    printf("       --> comparing pokemons after calling go_exploring\n");
    printf("--> #001: Bulbasaur\n");
    printf("    #002: *******\n");
    printf("    #003: SAMPLE\n");
 
    printf("    ... Destroying the Pokedex\n");
    destroy_pokedex(pokedex);

    printf(">> Passed go_exploring_and_print_pokemon tests!\n");
}

// `test_get_pokemon_of_type` checks whether the get_pokemon_of_type
// function works correctly.
//
// It does this by creating three Pokemon: Bulbasaur, Ivysaur and Sample. 

// (using the helper functions in this file and the provided code in pokemon.c).
//
// It then adds these to the Pokedex, 
// then transfter the current selct to next.
// then sets ivysaur to be found
// then calls the get_pokemon_of_type function to get all of the Pokemon
// which have been found (which should be just the one, Bulbasaur).
static void test_get_pokemon_of_type (void) {
    printf("\n>> Testing get_pokemon_of_type\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == bulbasaur);
    
    printf("    ... Transfer the current pokemon into the next pokemon\n");
    next_pokemon(pokedex);
    
    printf("       --> Checking that the current Pokemon is ivysaur\n");
    assert(get_current_pokemon(pokedex) == ivysaur);
    
    printf("    ... Setting ivysaur to be found\n");
    find_current_pokemon(pokedex);

    printf("    ... Getting all pokemon_of_type\n");
    Pokedex type_pokedex = get_pokemon_of_type (pokedex, GRASS_TYPE);

    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(type_pokedex) == 1);
    assert(count_found_pokemon(type_pokedex) == 1);
    

    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
    destroy_pokedex(type_pokedex);

    printf(">> Passed get_pokemon_of_type tests!\n");
}




// the fuction used to test if the testsearch fuction is able to use.
// during the test, we use 
// `test_search_pokemon` checks whether the search_pokedex
// function works correctly.
//
// It does this by creating three Pokemon: Bulbasaur, Ivysaur and Sample. 

// (using the helper functions in this file and the provided code in pokemon.c).
//
// It then adds these to the Pokedex, 
// first, set bulbasaur be found
// then transfter the current selct to next.
// then sets ivysaur to be found
// then use [change_current_pokemon] fuction
// chang ID3 pokemon to be found (Sample) 
// then calls the search_pokedex function to get all of the Pokemon
// with letters"au".
// which have been found (which should be TWO, Ivysaur, Bulbasaur).
static void test_search_pokemon (void) {
    printf("\n>> Testing search_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == bulbasaur);
    
    printf("    ... Seting current pokemon has been found\n");
    find_current_pokemon(pokedex);
    
    printf("    ... Transfer the current pokemon into the next pokemon\n");
    next_pokemon(pokedex);
    
    printf("       --> Checking that the current Pokemon is ivysaur\n");
    assert(get_current_pokemon(pokedex) == ivysaur);
    
    printf("    ... Setting ivysaur to be found\n");
    find_current_pokemon(pokedex);
    
    printf("    ... changing_current_pokemon to the id of 3 \n");
    change_current_pokemon(pokedex, 3);
    
    printf("       --> Checking that the current Pokemon is sample\n");
    assert(get_current_pokemon(pokedex) == sample);
    
    printf("    ... Seting current pokemon has been found\n");
    find_current_pokemon(pokedex);
    
    printf("    ... Getting all search_pokemon\n");
    Pokedex search_pokedex = search_pokemon(pokedex, "au");

    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(search_pokedex) == 2);
    assert(count_found_pokemon(search_pokedex) == 2);
    

    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
    destroy_pokedex(search_pokedex);

    printf(">> Passed search_pokemon tests!\n");
}


// the fuction used to test if the evolution would be cover
// if we add the new evolution into the original pokemon.

// It does this by creating three Pokemon: Bulbasaur, Ivysaur and Sample. 
// (using the helper functions in this file and the provided code in pokemon.c).
//
// then it adds these to the Pokedex, 
// first, set bulbasaur be found

// then use [change_current_pokemon] fuction
// chang ID3 pokemon is current selct pokemon(Sample) 
// then evo of no.3 sample is no.1 bulbasaur

// then change transfer the evo of no.3 sample is no.2 ivysaur.
 
// now the evolution of Sample should be cover
// by no.2 ivysaur.
static void test_if_the_evo_can_cover_old (void) {
    printf("\n>> Testing add_in_new_pokedex and get_next_evolution\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == bulbasaur);
    
    printf("    ... Seting current pokemon has been found\n");
    find_current_pokemon(pokedex);
  
    printf("    ... changing_current_pokemon to the id of 3 \n");
    change_current_pokemon(pokedex, 3);
   
    printf("       --> Checking that the current Pokemon is sample\n");
    assert(get_current_pokemon(pokedex) == sample);
   
    printf("    ... firstly, set the evo of no.3 sample is no.1 bulbasaur\n");
    add_pokemon_evolution(pokedex, 3, 1);
    
    printf("       --> Checking that the current Pokemon's evo is no.1\n");
    assert(get_next_evolution(pokedex) == 1);
   
    printf("    ... then, transfer the evo of no.3 sample is no.2 ivysaur\n");
    add_pokemon_evolution(pokedex, 3, 2);
    
    printf("       --> Checking that the current Pokemon's evo has been cover by no.2\n");
    assert(get_next_evolution(pokedex) == 2);
    
    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
 
    printf(">> Passed add_in_new_pokedex and get_next_evolution tests!\n");
}


// check if the remove fuction is able to remove all the pokemon,
// untill the pokedex is empty.

// firstly, use add fuction to add three pokemons to the pokedex
// (bulbasaur, ivysaur, sample)
// then, iterate the loop to remove all the current selct node.
// after all the remove repeations
// the sum of pokemons is zero.
static void test_if_remove_can_repeating_untill_NULL (void) {
    printf("\n>> Testing remove_pokemon\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the total number of pokemon is 3\n");
    assert(count_total_pokemon(pokedex) == 3);
    
    printf("    ... iterate the list and do removing everytime\n");
    int count = count_total_pokemon(pokedex);
    while (count > 0) {
        remove_pokemon(pokedex);
        count--;
    
    }   
      
    printf("       --> Checking if the total number ");
    printf("of pokemons is zero after removing\n");
    
    assert(count_total_pokemon(pokedex) == 0);
    
    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
 
    printf(">> Passed repeating remove tests!\n");
}


// the fuction designed to test if the new pokedex edit 
// would alter the original pokedex.

// firstly, use add fuction to add three pokemons to the pokedex
// (bulbasaur, ivysaur, sample)
// then, use reapting while, to set all the pokemon be found
// then, geting all the founded pokemons to create a new pokedex 
// named get_found_pokemon pokedex

// then modify the new pokedex and remove all the pokemons 
// by using while loop.
// then check the number of new_pokedex is zero.
// finally, check if the number of original pokedex has never been changed
// still is 3. 
static void test_if_new_pokedex_edit_alter_ori_pokedex (void) {
    printf("\n>> Testing the new pokedex would not alter the original pokedex.\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);

    printf("       --> Checking that the total number of pokemon is 3\n");
    assert(count_total_pokemon(pokedex) == 3);
    
    printf("    ... changing all the pokemons being found\n");
    int count = count_total_pokemon(pokedex);
    while (count > 0) {
        find_current_pokemon(pokedex);
        next_pokemon(pokedex);
        count--;
    }
    
    printf("       --> Checking all the pokemons have been found\n");
    assert(count_found_pokemon(pokedex) == count_total_pokemon(pokedex));
    
    printf("    ... Getting all found pokemons\n");
    Pokedex found_pokedex = get_found_pokemon(pokedex);

    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(found_pokedex) == 3);
    assert(count_found_pokemon(found_pokedex) == 3);
    
    printf("    ...removing all the pokemons of new pokedex\n");
    count  =  count_total_pokemon(found_pokedex);
    while (count > 0) {
        remove_pokemon(found_pokedex);
        count--;
    }
    
    printf("       --> Checking all the pokemons have been remove out\n");
    assert(count_total_pokemon(found_pokedex) == 0);
   
    printf("       --> Checking the original pokedex has not been altered.\n");
    assert(count_total_pokemon(pokedex) == 3);
    assert(count_found_pokemon(pokedex) == 3);
    
    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
    destroy_pokedex(found_pokedex);
    
    printf(">> Passed no altering original pokedex tests!\n");
}


// the fuction used to check if the evolution information 
// has not been copied into the new pokedex.

// firstly, use add fuction to add three pokemons to the pokedex
// (bulbasaur, ivysaur, sample)
// then, use reapting while, to set all the pokemon be found
// then, use [change_current_pokemon] fuction to chane current select
// into the id of 01.
// then, set the bulbasaur's evolution is sample

// then, create a new pokedex gets all found pokemons.
// and check if the current selcet pokemon of new pokedex is bulbasaur
// final check if the current pokemon's evolution is DOES_NOT_EVOLVE.
static void test_if_evo_info_be_copied (void) {
    printf("\n>> Testing if_evo_info_be_copied.\n");

    printf("    ... Creating a new Pokedex\n");
    Pokedex pokedex = new_pokedex();

    printf("    ... Creating Bulbasaur, Ivysaur and sample.\n");
    Pokemon bulbasaur = create_bulbasaur();
    Pokemon ivysaur = create_ivysaur();
    Pokemon sample = create_sample();
    
    printf("    ... Adding Bulbasaur Ivysaur and sample to the Pokedex\n");
    add_pokemon(pokedex, bulbasaur);
    add_pokemon(pokedex, ivysaur);
    add_pokemon(pokedex, sample);
    
    printf("       --> Checking that the total number of pokemon is 3\n");
    assert(count_total_pokemon(pokedex) == 3);
    
    printf("    ... changing all the pokemons being found\n");
    int count = count_total_pokemon(pokedex);
    while (count > 0) {
        find_current_pokemon(pokedex);
        next_pokemon(pokedex);
        count--;
    }
    
    printf("       --> Checking all the pokemons have been found\n");
    assert(count_found_pokemon(pokedex) == count_total_pokemon(pokedex));
    
    printf("    ... changing_current_pokemon to the id of 1 \n");
    change_current_pokemon(pokedex, 1);

    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == bulbasaur);
    
    printf("    ... set the bulbasaur's evolution is sample\n");
    add_pokemon_evolution(pokedex, 1, 3);
   
    printf("       --> Checking the bulbasaur's evolution is sample\n");
    assert(get_next_evolution(pokedex) == 3);
    
    printf("    ... showing the evolution in this pokedex\n");
    show_evolutions(pokedex);
    
    printf("       --> Checking the evolution print correctly\n");
    printf("#001 Bulbasaur [Grass, Poison]");
    printf(" --> #003 SAMPLE [Water, Flying]\n");
    
    printf("    ... Getting all found pokemons\n");
    Pokedex found_pokedex = get_found_pokemon(pokedex);

    printf("       --> Checking the correct Pokemon were copied and returned\n");
    assert(count_total_pokemon(found_pokedex) == 3);
    assert(count_found_pokemon(found_pokedex) == 3);
    
    printf("       --> Checking that the current Pokemon is Bulbasaur\n");
    assert(get_current_pokemon(pokedex) == bulbasaur);
    
    printf("       --> Checking if the evolution information has been copied\n");
    assert(get_next_evolution (found_pokedex) == DOES_NOT_EVOLVE);;
      
    printf("    ... Destroying both Pokedexes\n");
    destroy_pokedex(pokedex);
    destroy_pokedex(found_pokedex);
    
    printf(">> Passed if_evo_info_be_copied tests!\n");

}



////////////////////////////////////////////////////////////////////////
//                     Helper Functions                               //
////////////////////////////////////////////////////////////////////////

// Helper function to create Bulbasaur for testing purposes.
static Pokemon create_bulbasaur(void) {
    Pokemon pokemon = new_pokemon(
            BULBASAUR_ID, BULBASAUR_NAME,
            BULBASAUR_HEIGHT, BULBASAUR_WEIGHT,
            BULBASAUR_FIRST_TYPE,
            BULBASAUR_SECOND_TYPE
    );
    return pokemon;
}

// Helper function to create Ivysaur for testing purposes.
static Pokemon create_ivysaur(void) {
    Pokemon pokemon = new_pokemon(
            IVYSAUR_ID, IVYSAUR_NAME,
            IVYSAUR_HEIGHT, IVYSAUR_WEIGHT,
            IVYSAUR_FIRST_TYPE,
            IVYSAUR_SECOND_TYPE
    );
    return pokemon;
}

// Helper function to compare whether two Pokemon are the same.
// This checks that the two pointers contain the same address, i.e.
// they are both pointing to the same pokemon struct in memory.
//
// Pokemon ivysaur = new_pokemon(0, 'ivysaur', 1.0, 13.0, GRASS_TYPE, POISON_TYPE)
// Pokemon also_ivysaur = ivysaur
// is_same_pokemon(ivysaur, also_ivysaur) == TRUE
static int is_same_pokemon(Pokemon first, Pokemon second) {
    return first == second;
}

// Helper function to compare whether one Pokemon is a *copy* of
// another, based on whether their attributes match (e.g. pokemon_id,
// height, weight, etc).
// 
// It also checks that the pointers do *not* match -- i.e. that the
// pointers aren't both pointing to the same pokemon struct in memory.
// If the pointers both contain the same address, then the second
// Pokemon is not a *copy* of the first Pokemon.
// 
// This function doesn't (yet) check that the Pokemon's names match
// (but perhaps you could add that check yourself...).
static int is_copied_pokemon(Pokemon first, Pokemon second) {
    return (pokemon_id(first) == pokemon_id(second))
    &&  (first != second)
    &&  (pokemon_height(first) == pokemon_height(second))
    &&  (pokemon_weight(first) == pokemon_weight(second))
    &&  (pokemon_first_type(first) == pokemon_first_type(second))
    &&  (pokemon_second_type(first) == pokemon_second_type(second));
}

///////MY Helper Fuction
// Helper function to create sample for testing purposes.
static Pokemon create_sample(void) {
    Pokemon pokemon = new_pokemon(
            SAMPLE_ID, SAMPLE_NAME,
            SAMPLE_HEIGHT, SAMPLE_WEIGHT,
            SAMPLE_FIRST_TYPE,
            SAMPLE_SECOND_TYPE
    );
    return pokemon;
}
